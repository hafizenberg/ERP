@model ChandrimERP.Models.UserDetails

@{
    ViewBag.Title = "ProfileUpdate";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
.cus i{
    color: #FFF;
}
</style>
<div class="container cus">
@using (Html.BeginForm(null, null, FormMethod.Post,
                                     new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="col-md-2">

    </div>
    <div class="col-md-8">
        <div class="card-style ">
            @Html.HiddenFor(model => model.Id)

            <div class="card-style-header">
                <h4>Update Your Profile</h4>
            </div>

            <div class="form-horizontal">
                <div class="card-style-body">
                    @Html.ValidationSummary(true, "", new {@class = "text-danger"})

                    <div class="col-md-6">

                        <div class="form-group">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.FirstName, htmlAttributes: new {@class = "control-label"})
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.FirstName, new {htmlAttributes = new {@class = "form-control"}})
                                </div>
                                @Html.ValidationMessageFor(model => model.FirstName, "", new {@class = "text-danger"})
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.LastName, htmlAttributes: new {@class = "control-label"})
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.LastName, new {htmlAttributes = new {@class = "form-control"}})
                                </div>
                                @Html.ValidationMessageFor(model => model.LastName, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EnumDropDownListFor(model => model.Genders, "Select Gender", new {@class = "form-control"})
                                </div>
                                @Html.ValidationMessageFor(model => model.Genders, "", new {@class = "text-danger"})
                            </div>

                        </div>
                        <div class="form-group">

                            <div class="col-md-12">
                                @Html.EditorFor(model => model.CreatedOn, new {htmlAttributes = new {@class = "form-control"}})
                                @Html.ValidationMessageFor(model => model.CreatedOn, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-globe"></i>
                                    </span>
                                    @Html.DropDownListFor(m => m.Country, new SelectList(""), "Country", new {@class = "form-control"})
                                </div>
                                @Html.ValidationMessageFor(model => model.Country, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-globe"></i>
                                    </span>
                                    @Html.DropDownListFor(m => m.State, new SelectList(""), "State", new {@class = "form-control"})
                                </div>
                                @Html.ValidationMessageFor(model => model.State, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-globe"></i>
                                    </span>
                                    @Html.DropDownListFor(m => m.City, new SelectList(""), "City", new {@class = "form-control"})
                                </div>
                                @Html.ValidationMessageFor(model => model.City, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.AddressLineOne, htmlAttributes: new {@class = "control-label"})
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-map-marker"></i>
                                    </span>
                                    @Html.EditorFor(model => model.AddressLineOne, new {htmlAttributes = new {@class = "form-control"}})
                                </div>
                                @Html.ValidationMessageFor(model => model.AddressLineOne, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.AddressLineTwo, htmlAttributes: new {@class = "control-label"})
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-map-marker"></i>
                                    </span>
                                    @Html.EditorFor(model => model.AddressLineTwo, new {htmlAttributes = new {@class = "form-control"}})
                                </div>
                                @Html.ValidationMessageFor(model => model.AddressLineTwo, "", new {@class = "text-danger"})
                            </div>
                        </div>


                    </div>
                    <div class="col-md-6">
                        <div class="col-md-12">
                            @{
                                var imagePath = "";
                                imagePath = Url.Content(Model.PhotosUrl);
                            }
                            @if (imagePath != "")
                            {
                                <img src="@imagePath" class="avatar img-thumbnail" alt="avatar" style="width: 100%; height: auto; margin-bottom: 20px;">
                            }
                            <div id="alert" style="width: 80%;"></div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-12">
                                <input type="file" class="text-center center-block file-upload" name="imageUpload" accept="image/*" id="file" data-file_types="png|jpg|jpeg"/>
                                @Html.ValidationMessageFor(model => model.PhotosUrl, "", new {@class = "text-danger"})
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.Notes, htmlAttributes: new {@class = "control-label"})
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.Notes, new {htmlAttributes = new {@class = "form-control"}})
                                </div>
                                @Html.ValidationMessageFor(model => model.Notes, "", new {@class = "text-danger"})
                            </div>
                        </div>


                    </div>


                </div>

            </div>
            <div class="card-style-footer">
                <div class="btn-group left">

                </div>
                <div class="btn-group right">
                    <input type="submit" value="Update" class="btn btn-default"/>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-2">

    </div>
                            }

</div>
@section Scripts
{
    <script>
        /* country dropdown list*/
        $(document).ready(function () {
            $.ajax({
                type: "GET",
                url: "/Country/GetCountryList",
                contentType: "application/json; charset=utf-8",
                datatype: 'json',
                success: function (response) {
                    $("#Country").empty();
                    $("#Country").append(response);
                },
                error: function (data) { }
            });
        });
        /* State dropdown list*/
        $(document).ready(function() {

            $("#Country").change(function() {

                var countryId = $(this).val();
                $.ajax({
                    type: "Post",
                    url: "/Country/GetStateList?CountryId=" + countryId,
                    contentType: "html",
                    success: function(response) {
                        $("#State").empty();
                        $("#State").append(response);

                    }

                });

            });

        });
        /* City dropdown list*/
        $(document).ready(function() {

            $("#State").change(function() {

                var stateId = $(this).val();
                $.ajax({
                    type: "Post",
                    url: "/Country/GetCityList?StateId=" + stateId,
                    contentType: "html",
                    success: function(response) {
                        $("#City").empty();
                        $("#City").append(response);

                    }

                });

            });

        });

        /* Date Picker Looltip */
        $(document).ready(function () {
            $('[data_toggle="tooltip"]').tooltip();
        });

        /* File Upload validate*/
        $('#file').on('change', function () {
            var numb = $(this)[0].files[0].size / 1024 / 1024; //count file size
            var resultid = $(this).val().split(".");
            var gettypeup = resultid[resultid.length - 1]; // take file type uploaded file
            var filetype = $(this).attr('data-file_types'); // take allowed files from input
            var allowedfiles = filetype.replace(/\|/g, ', '); // string allowed file
            var filesize = 2; //2MB
            var onlist = $(this).attr('data-file_types').indexOf(gettypeup) > -1;
            var checkinputfile = $(this).attr('type');
            numb = numb.toFixed(2);

            if (onlist && numb <= filesize) {
                $('#alert').html('The file is ready to upload').removeAttr('class').addClass('xd2'); //file OK
            } else {
                if (numb >= filesize && onlist) {
                    $(this).val(''); //remove uploaded file
                    $('#alert').html('Added file is too big \(' + numb + ' MB\) - max file size ' + filesize + ' MB').removeAttr('class').addClass('xd'); //alert that file is too big, but type file is ok
                } else if (numb < filesize && !onlist) {
                    $(this).val(''); //remove uploaded file
                    $('#alert').html('An not allowed file format has been added \(' + gettypeup + ') - allowed formats: ' + allowedfiles).removeAttr('class').addClass('xd'); //wrong type file
                } else if (!onlist) {
                    $(this).val(''); //remove uploaded file
                    $('#alert').html('An not allowed file format has been added \(' + gettypeup + ') - allowed formats: ' + allowedfiles).removeAttr('class').addClass('xd'); //wrong type file
                }
            }
        });
        /* File upload preview*/
        $(document).ready(function () {


            var readURL = function (input) {
                if (input.files && input.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $('.avatar').attr('src', e.target.result);
                    }

                    reader.readAsDataURL(input.files[0]);
                }
            }


            $(".file-upload").on('change', function () {
                readURL(this);
            });
        });
    </script>
}