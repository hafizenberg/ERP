@model ChandrimERP.Models.Supplier

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .cus i {
        color: #FFF;
    }
</style>
<div class="container cus">
    @using (Html.BeginForm(null, null, FormMethod.Post,
            new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <div class="card-style">
            <div class="card-style-header">
                <h4>Update Supplier</h4>
            </div>
            <div class="card-style-body">
                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="col-md-12">

                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.DropDownList("CompanyId", null, "Select Your Company", htmlAttributes: new {@class = "form-control"})
                                </div>
                                @Html.ValidationMessageFor(model => model.CompanyId, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12 inputGroupContainer">

                                    @Html.HiddenFor(model => model.SupplierId, new { htmlAttributes = new { @class = "form-control" } })

                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12 inputGroupContainer">
                                @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="glyphicon glyphicon-user"></i>
                                    </span>
                                    @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.OpeningBlance, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.OpeningBlance, new { htmlAttributes = new { @class = "form-control", @placeholder = "Opening Balance" ,@readonly = "readonly"} })
                                @Html.ValidationMessageFor(model => model.OpeningBlance, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.JobTitle, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.JobTitle, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.JobTitle, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.ContactFirstName, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.ContactFirstName, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.ContactFirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.ContactLastName, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.ContactLastName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Contact Last Name" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.ContactLastName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.Genders, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EnumDropDownListFor(model => model.Genders, "Select Gender", htmlAttributes: new { @class = "form-control" })
                                </div>
                                @Html.ValidationMessageFor(model => model.Genders, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.BussinessPhone, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.BussinessPhone, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.BussinessPhone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.MobilePhone, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.MobilePhone, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.MobilePhone, "", new { @class = "text-danger" })
                                @Html.ValidationMessage("PhoneNoExist", new { @class = "text-danger" })
                            </div>
                        </div>


                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.TinNumber, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.TinNumber, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.TinNumber, "", new { @class = "text-danger" })
                            </div>

                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(m => m.Country, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                   @Html.EditorFor(m => m.State, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                   @Html.EditorFor(m => m.City, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.NationalId, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.NationalId, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.NationalId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.FaxNumber, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.FaxNumber, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.FaxNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.ZipOrPostalCode, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.ZipOrPostalCode, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.ZipOrPostalCode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.AddressLineOne, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.AddressLineOne, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.AddressLineOne, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.AddressLineTwo, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.AddressLineTwo, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.AddressLineTwo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="col-md-12">
                            @{
                                var imagePath = "";
                                imagePath = Url.Content(Model.ImageUrl);
                            }
                            @if (imagePath != "")
                            {
                                <img src="@imagePath" class="avatar img-thumbnail" alt="avatar" style="width: 80%; height: auto; margin-bottom: 20px;">
                            }
                            <div id="alert" style="width: 80%;"></div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                <input type="file" class="text-center center-block file-upload" name="ImageUpload" accept="image/*" id="file" data-file_types="png|jpg|jpeg" />
                                @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>

                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.Website, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.Website, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.Website, "", new { @class = "text-danger" })
                            </div>

                        </div>

                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">

                            <div class="col-md-12">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.Status)
                                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label" })
                                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-style-footer">
                <div class="btn-group right">
                    <input type="submit" value="Update" class="btn btn-outline-primary" />
                </div>
            </div>
        </div>
                                }
</div>
@section Scripts
{
    <script>
        /* country dropdown list*/
        $(document).ready(function () {
            $.ajax({
                type: "GET",
                url: "/Country/GetCountryList",
                contentType: "application/json; charset=utf-8",
                datatype: 'json',
                success: function (response) {
                    $("#Country").empty();
                    $("#Country").append(response);
                },
                error: function (data) { }
            });
        });
        /* State dropdown list*/
        $(document).ready(function () {

            $("#Country").change(function () {

                var countryId = $(this).val();
                $.ajax({
                    type: "Post",
                    url: "/Country/GetStateList?CountryId=" + countryId,
                    contentType: "html",
                    success: function (response) {
                        $("#State").empty();
                        $("#State").append(response);
                    }
                });
            });
        });
        /* City dropdown list*/
        $(document).ready(function () {
            $("#State").change(function () {
                var stateId = $(this).val();
                $.ajax({
                    type: "Post",
                    url: "/Country/GetCityList?StateId=" + stateId,
                    contentType: "html",
                    success: function (response) {
                        $("#City").empty();
                        $("#City").append(response);
                    }
                });
            });
        });

        /* Date Picker Looltip */
        $(document).ready(function () {
            $('[data_toggle="tooltip"]').tooltip();
        });

        /* File Upload validate*/
        $('#file').on('change', function () {
            var numb = $(this)[0].files[0].size / 1024 / 1024; //count file size
            var resultid = $(this).val().split(".");
            var gettypeup = resultid[resultid.length - 1]; // take file type uploaded file
            var filetype = $(this).attr('data-file_types'); // take allowed files from input
            var allowedfiles = filetype.replace(/\|/g, ', '); // string allowed file
            var filesize = 2; //2MB
            var onlist = $(this).attr('data-file_types').indexOf(gettypeup) > -1;
            var checkinputfile = $(this).attr('type');
            numb = numb.toFixed(2);

            if (onlist && numb <= filesize) {
                $('#alert').html('The file is ready to upload').removeAttr('class').addClass('xd2'); //file OK
            } else {
                if (numb >= filesize && onlist) {
                    $(this).val(''); //remove uploaded file
                    $('#alert').html('Added file is too big \(' + numb + ' MB\) - max file size ' + filesize + ' MB').removeAttr('class').addClass('xd'); //alert that file is too big, but type file is ok
                } else if (numb < filesize && !onlist) {
                    $(this).val(''); //remove uploaded file
                    $('#alert').html('An not allowed file format has been added \(' + gettypeup + ') - allowed formats: ' + allowedfiles).removeAttr('class').addClass('xd'); //wrong type file
                } else if (!onlist) {
                    $(this).val(''); //remove uploaded file
                    $('#alert').html('An not allowed file format has been added \(' + gettypeup + ') - allowed formats: ' + allowedfiles).removeAttr('class').addClass('xd'); //wrong type file
                }
            }
        });
        /* File upload preview*/
        $(document).ready(function () {
            var readUrl = function (input) {
                if (input.files && input.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $('.avatar').attr('src', e.target.result);
                    }

                    reader.readAsDataURL(input.files[0]);
                }
            }
            $(".file-upload").on('change', function () {
                readUrl(this);
            });
        });
    </script>
}