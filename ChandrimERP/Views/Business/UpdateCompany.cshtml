
@model ChandrimERP.Models.Company

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .cus i {
        color: #FFF;
    }

    @@media (min-width: 768px) {
        .form-horizontal .control-label {
            padding-top: 0px;
        }
    }
</style>


<div class="container cus">
@using (Html.BeginForm(null, null, FormMethod.Post,
                new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

        <div class="card-style">
            <div class="card-style-header">
                <h4>Update Company</h4>
                @if (ViewBag.ConMess != null)
                {
                    <script>
                        alert('@ViewBag.ConMess');
                        window.location.href = '@Url.Action("Index", "Business")';
                    </script>
                }
            </div>
            <div class="card-style-body">
                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    <div class="col-md-6">
                        <div class="form-group">

                            <div class="col-md-12">
                                @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.ContactFirstName, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.ContactFirstName, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.ContactFirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.ContactLastName, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.ContactLastName, new { htmlAttributes = new { @class = "form-control" } })
                                </div>

                                @Html.ValidationMessageFor(model => model.ContactLastName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">

                            <div class="col-md-12">
                                @Html.LabelFor(model => model.Genders, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EnumDropDownListFor(model => model.Genders, htmlAttributes: new { @class = "form-control" })
                                </div>
                                @Html.ValidationMessageFor(model => model.Genders, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                                </div>

                                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">

                            <div class="col-md-12">
                                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.WebPage, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.WebPage, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.WebPage, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.VatInformation, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.VatInformation, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.VatInformation, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.FinancialYearStart, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.FinancialYearStart, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.FinancialYearStart, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.BusinessType, htmlAttributes: new {@class = "control-label"})
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.BusinessType, new {htmlAttributes = new {@class = "form-control", @readonly = "readonly"}})
                                </div>
                                @Html.ValidationMessageFor(model => model.BusinessType, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="col-md-12">
                            @{
                                var imagePath = "";
                                try
                                {
                                    imagePath = Url.Content(Model.CompanyLogo);
                                }
                                catch (Exception ex)
                                {
                                    Console.WriteLine(ex);
                                }
                            }
                            @if (imagePath != "")
                            {
                                <img src="@imagePath" class="avatar img-thumbnail" alt="avatar" style="width: auto; height: 200px; margin-bottom: 20px;">
                            }
                            <div id="alert" style="width: 100%;"></div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                <input type="file" class="text-center center-block file-upload" name="ImageUpload" accept="image/*" id="file" data-file_types="png|jpg|jpeg" />
                                @Html.ValidationMessageFor(model => model.CompanyLogo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.AddressLineOne, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.AddressLineOne, new { htmlAttributes = new { @class = "form-control" } })
                                </div>

                                @Html.ValidationMessageFor(model => model.AddressLineOne, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.AddressLineTwo, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.AddressLineTwo, new { htmlAttributes = new { @class = "form-control" } })
                                </div>

                                @Html.ValidationMessageFor(model => model.AddressLineTwo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label" })
                                <div class="d-flex">
                                    <span class="input-group-addon cuspadding">
                                        <i class="fa fa-pencil"></i>
                                    </span>
                                    @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-style-footer">
                <div class="btn-group right">
                    <button type="button" class="btn btn-default ">@Html.ActionLink("Back To List", "Index")</button>
                    <input type="submit" value="Save" class="btn btn-outline-primary"/>
                </div>
            </div>
        </div>
                                }
</div>

@section scripts{
    <script>
    /* File Upload validate*/
    $('#file').on('change', function () {
        var numb = $(this)[0].files[0].size / 1024 / 1024; //count file size
        var resultid = $(this).val().split(".");
        var gettypeup = resultid[resultid.length - 1]; // take file type uploaded file
        var filetype = $(this).attr('data-file_types'); // take allowed files from input
        var allowedfiles = filetype.replace(/\|/g, ', '); // string allowed file
        var filesize = 2; //2MB
        var onlist = $(this).attr('data-file_types').indexOf(gettypeup) > -1;
        var checkinputfile = $(this).attr('type');
        numb = numb.toFixed(2);

        if (onlist && numb <= filesize) {
            $('#alert').html('The file is ready to upload').removeAttr('class').addClass('xd2'); //file OK
        } else {
            if (numb >= filesize && onlist) {
                $(this).val(''); //remove uploaded file
                $('#alert').html('Added file is too big \(' + numb + ' MB\) - max file size ' + filesize + ' MB').removeAttr('class').addClass('xd'); //alert that file is too big, but type file is ok
            } else if (numb < filesize && !onlist) {
                $(this).val(''); //remove uploaded file
                $('#alert').html('An not allowed file format has been added \(' + gettypeup + ') - allowed formats: ' + allowedfiles).removeAttr('class').addClass('xd'); //wrong type file
            } else if (!onlist) {
                $(this).val(''); //remove uploaded file
                $('#alert').html('An not allowed file format has been added \(' + gettypeup + ') - allowed formats: ' + allowedfiles).removeAttr('class').addClass('xd'); //wrong type file
            }
        }
    });
    /* File upload preview*/
    $(document).ready(function () {


        var readURL = function (input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('.avatar').attr('src', e.target.result);
                }

                reader.readAsDataURL(input.files[0]);
            }
        }


        $(".file-upload").on('change', function () {
            readURL(this);
        });
    });
</script>
}
